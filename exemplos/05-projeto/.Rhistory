runApp()
library(ploty)
library(ploty)
library(plotly)
runApp('~/Desktop')
setwd("~/Desktop")
runApp()
runApp()
?ggplotly
runApp()
runApp()
?plotlyOutput
runApp()
runApp()
fit1=lm(mpg~wt,data=mtcars)
fit2=lm(mpg~wt+I(2*wt)+I(3*wt),data=mtcars)
all(predict(fit1,mtcars)==predict(fit2,mtcars))
predict(fit1,mtcars)
predict(fit2, mtcars)
ajuste <- lm(mpg ~ wt + 2*wt, data=mtcars)
ajuste <- lm(mpg ~ wt + I(2*wt), data=mtcars)
predict(fit2, mtcars)
?I
I(2*wt)
I(2*mtcars$wt)
2*mtcars$wt
ajuste <- lm(mpg ~ wt + 2*wt, data=mtcars)
ajuste <- lm(mpg ~ wt + I(2*wt), data=mtcars)
predict(fit2, mtcars)
ajuste <- lm(mpg ~ wt + I(2*wt), data=mtcars)
predict(fit2, mtcars)
ajuste
predict(fit2, mtcars)
predict(ajuste, mtcars)
mpg <- mpg[1:2, ]
ajuste <- lm(mpg ~ wt + I(2*wt), data=mtcars)
predict(ajuste, mtcars)
ajuste
dados <- mtcars[1:2, ]
dados
ajuste <- lm(mpg ~ wt, data=dados)
predict(ajuste, mtcars)
predict(ajuste, dados)
x <- c(1, 2)
y <- c(3, 4)
lm(y ~ x)
predict(ajuste, data.frame(x=1.5))
x <- c(1, 2)
y <- c(3, 4)
ajuste <- lm(y ~ x)
predict(ajuste, data.frame(x=1.5))
x <- c(1)
y <- c(3)
ajuste <- lm(y ~ x)
predict(ajuste, data.frame(x=1.5))
x <- 1
y <- 3
ajuste <- lm(y ~ x)
ajuste
predict(ajuste, data.frame(x=1.5))
x <- c(1, 2)
y <- c(3, 1)
z <- c(5, 0)
ajuste <- lm(z ~ x + y)
predict(ajuste, data.frame(x=1.5, y=2.5))
x <- c(1, 2, 1)
y <- c(3, 1, 1)
z <- c(5, 0, 1)
ajuste <- lm(z ~ x + y)
predict(ajuste, data.frame(x=1.5, y=2.5))
summary(ajute)
summary(ajuste)
predict(ajuste, data.frame(x=1.5, y=2.5))
setwd("~/Documents/Research/github/MyFitnessPal")
library(ggplot2)
library(dplyr)
library(forecast)
library(lubridate)
library(tidyverse)
library(forecast)
library(lubridate)
library(wesanderson)
library(scales)
library(zoo)
dados <- as_data_frame(read.table(file="data.csv", sep=",", header=TRUE))
dados <- dados %>%
select(-Calories)
dim(dados)
str(dados)
dados$Date           <- ymd(dados$Date)
dados$Year           <- year(dados$Date)
dados$Month          <- month(dados$Date)
dados$Day            <- day(dados$Date)
dados$GrupoDiaSemana <- wday(dados$Date, label=TRUE)
dados$GrupoMes       <- ymd(paste(dados$Year, dados$Month, "01", sep="-"))
g1 <- ggplot(data=dados, aes(x=Date)) +
labs(x="Data", y="Peso (kg)") +
geom_line(aes(y=Weight, colour="Peso Real")) +
#geom_line(aes(y=c(rep(NA,  6), rollmean(Weight,  7)), colour="MM 07 Dias")) +
geom_line(aes(y=c(rep(NA, 29), rollmean(Weight, 30)), colour="MM 30 Dias")) +
geom_line(aes(y=c(rep(NA, 89), rollmean(Weight, 90)), colour="MM 90 Dias")) +
scale_colour_manual("Legenda", values = wes_palette("Zissou1")[c(5, 3, 2)]) +
scale_y_continuous(breaks = round(seq(floor(min(dados$Weight)), ceiling(max(dados$Weight)), by=1), 1), minor_breaks=NULL, limits=c(min(dados$Weight), max(dados$Weight))) +
scale_x_date(breaks=seq(min(dados$Date), max(dados$Date), by="2 month"), date_labels="%b/%Y", minor_breaks=seq(min(dados$Date), max(dados$Date), by="2 month")) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
annotate("text", ymd("2016-06-25"), 80, label="Buenos Aires", hjust=0.25) +
geom_segment(aes(x = ymd("2016-06-25"), y = 73, xend = ymd("2016-06-25"), yend = 79.5)) +
annotate("text", ymd("2017-01-12"), 78, label="Porto Alegre", hjust=0.25) +
geom_segment(aes(x = ymd("2017-01-12"), y = 77.5, xend = ymd("2017-01-12"), yend = 74)) +
annotate("text", ymd("2017-08-01"), 76, label="Comecei a correr na rua", hjust=0.25) +
geom_segment(aes(x = ymd("2017-08-01"), y = 72.5, xend = ymd("2017-08-01"), yend = 75.5)) +
annotate("text", ymd("2017-11-11"), 74, label="Parei de correr na rua", hjust=0.25) +
geom_segment(aes(x = ymd("2017-11-11"), y = 70.5, xend = ymd("2017-11-11"), yend = 73.5)) +
annotate("text", ymd("2017-12-26"), 70, label="Espanha", hjust=0.25) +
geom_segment(aes(x = ymd("2017-12-26"), y = 70.5, xend = ymd("2017-12-26"), yend = 71.5))
g1
library(tidyverse)
library(forecast)
library(lubridate)
library(wesanderson)
library(scales)
library(zoo)
# leitura de dados
dados <- as_data_frame(read.table(file="data.csv", sep=",", header=TRUE))
dados <- dados %>%
select(-Calories)
dim(dados)
str(dados)
dados$Date           <- ymd(dados$Date)
dados$Year           <- year(dados$Date)
dados$Month          <- month(dados$Date)
dados$Day            <- day(dados$Date)
dados$GrupoDiaSemana <- wday(dados$Date, label=TRUE)
dados$GrupoMes       <- ymd(paste(dados$Year, dados$Month, "01", sep="-"))
# grafico
g1 <- ggplot(data=dados, aes(x=Date)) +
labs(x="Data", y="Peso (kg)") +
geom_line(aes(y=Weight, colour="Peso Real")) +
#geom_line(aes(y=c(rep(NA,  6), rollmean(Weight,  7)), colour="MM 07 Dias")) +
geom_line(aes(y=c(rep(NA, 29), rollmean(Weight, 30)), colour="MM 30 Dias")) +
geom_line(aes(y=c(rep(NA, 89), rollmean(Weight, 90)), colour="MM 90 Dias")) +
scale_colour_manual("Legenda", values = wes_palette("Zissou1")[c(5, 3, 2)]) +
scale_y_continuous(breaks = round(seq(floor(min(dados$Weight)), ceiling(max(dados$Weight)), by=1), 1), minor_breaks=NULL, limits=c(min(dados$Weight), max(dados$Weight))) +
scale_x_date(breaks=seq(min(dados$Date), max(dados$Date), by="2 month"), date_labels="%b/%Y", minor_breaks=seq(min(dados$Date), max(dados$Date), by="2 month")) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
annotate("text", ymd("2016-06-25"), 80, label="Buenos Aires", hjust=0.25) +
geom_segment(aes(x = ymd("2016-06-25"), y = 73, xend = ymd("2016-06-25"), yend = 79.5)) +
annotate("text", ymd("2017-01-12"), 78, label="Porto Alegre", hjust=0.25) +
geom_segment(aes(x = ymd("2017-01-12"), y = 77.5, xend = ymd("2017-01-12"), yend = 74)) +
annotate("text", ymd("2017-08-01"), 76, label="Comecei a correr na rua", hjust=0.25) +
geom_segment(aes(x = ymd("2017-08-01"), y = 72.5, xend = ymd("2017-08-01"), yend = 75.5)) +
annotate("text", ymd("2017-11-11"), 74, label="Parei de correr na rua", hjust=0.25) +
geom_segment(aes(x = ymd("2017-11-11"), y = 70.5, xend = ymd("2017-11-11"), yend = 73.5)) +
annotate("text", ymd("2017-12-26"), 70, label="Espanha", hjust=0.25) +
geom_segment(aes(x = ymd("2017-12-26"), y = 70.5, xend = ymd("2017-12-26"), yend = 71.5))
g1
pdf("grafico01.pdf")
g1
dev.off()
# analise a cada mes
g2 <- ggplot(data=dados, aes(x=GrupoMes, y=Weight, group=GrupoMes, fill=as.factor(GrupoMes))) +
labs(x="Meses", y="Peso (kg)") +
geom_boxplot() +
scale_fill_manual("Meses", values=rep(wes_palette(5, name="Zissou1"), 20)[1:length(unique(dados$GrupoMes))]) +
scale_y_continuous(breaks = round(seq(floor(min(dados$Weight)), ceiling(max(dados$Weight)), by=1), 1), limits=c(min(dados$Weight), max(dados$Weight))) +
scale_x_date(breaks=seq(min(dados$Date), max(dados$Date), by="1 month"), date_labels="%b/%Y", minor_breaks=seq(min(dados$Date), max(dados$Date), by="1 month")) +
theme_bw() +
guides(fill=FALSE) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
g2
pdf("grafico02.pdf")
g2
dev.off()
# analise a cada dia da semana
ggplot(data=dados, aes(x=GrupoDiaSemana, y=Weight, group=GrupoDiaSemana, fill=GrupoDiaSemana)) +
labs(x="Dia da Semana", y="Peso (kg)") +
geom_boxplot() +
scale_fill_manual("Dia da Semana", values=rep(wes_palette(3, name="Royal1"), 20)[1:length(unique(dados$GrupoDiaSemana))]) +
scale_y_continuous(breaks = round(seq(floor(min(dados$Weight)), ceiling(max(dados$Weight)), by=1), 1), limits=c(min(dados$Weight), max(dados$Weight))) +
guides(fill=FALSE) +
theme_bw()
# descritivas
dados %>%
group_by(Year, Month) %>%
summarise(Mediana=median(Weight), Média=mean(Weight)) %>%
mutate(Data=ymd(paste(Year, Month, 01, sep="-"))) %>%
select(Data, Média, Mediana) %>%
print(n=Inf)
dados %>%
arrange(Weight) %>%
select(Day, Month, Year, Weight, GrupoDiaSemana) %>%
print(n=20)
dados %>%
arrange(Weight) %>%
select(Day, Month, Year, Weight, GrupoDiaSemana) %>%
print(n=20) %>%
filter(Weight < 71)
dados %>%
arrange(Weight) %>%
head(n=20) %>%
group_by(Year) %>%
count()
dados %>%
arrange(Weight) %>%
head(n=50) %>%
count(GrupoDiaSemana) %>%
arrange(desc(n))
dados %>%
filter(Year==2017) %>%
arrange(Weight) %>%
head(n=30) %>%
count(GrupoDiaSemana) %>%
arrange(desc(n))
#######################################
### analise usando series temporais ###
#######################################
# arima - melhorar visualização
ajuste.arima <- auto.arima(dados$Weight, max.p=10, max.q=10, max.d=3, seasonal=TRUE, ic="aicc")
tsdiag(ajuste.arima)
plot(forecast(ajuste.arima, h=20))
vinho <- read.table(file="vinho.txt", header=TRUE, sep="\t")
setwd("~/Documents/Lectures/UFRN/2018.2 - EST0133 - Introdução à Modelagem de Big Data/Aulas/Unidade II/10. Random Forest")
vinho <- read.table(file="vinho.txt", header=TRUE, sep="\t")
vinho_transformado <- vinho %>%
mutate(Tipo=Tipo,
Alcool=Alcool,
AcidoMalico=log(AcidoMalico),
Residuo=Residuo,
AlcalinidadeDoResiduo=AlcalinidadeDoResiduo,
Magnesio=log(Magnesio),
Fenois=Fenois,
Flavonoides=Flavonoides,
NaoFlavonoides=NaoFlavonoides,
Taninos=Taninos,
Cor=log(Cor),
Matiz=Matiz,
Diluicao=Diluicao,
Prolina=log(Prolina))
index        <- createDataPartition(vinho_transformado$Alcool,
p=0.75, list=FALSE)
vinho_treino <- vinho_transformado[ index, ]
library(carer)
library(caret)
vinho <- read.table(file="vinho.txt", header=TRUE, sep="\t")
vinho_transformado <- vinho %>%
mutate(Tipo=Tipo,
Alcool=Alcool,
AcidoMalico=log(AcidoMalico),
Residuo=Residuo,
AlcalinidadeDoResiduo=AlcalinidadeDoResiduo,
Magnesio=log(Magnesio),
Fenois=Fenois,
Flavonoides=Flavonoides,
NaoFlavonoides=NaoFlavonoides,
Taninos=Taninos,
Cor=log(Cor),
Matiz=Matiz,
Diluicao=Diluicao,
Prolina=log(Prolina))
index        <- createDataPartition(vinho_transformado$Alcool,
p=0.75, list=FALSE)
vinho_treino <- vinho_transformado[ index, ]
vinho_teste  <- vinho_transformado[-index, ]
fitControl <- trainControl(method = "cv",
number = 5,
savePred = TRUE)
library(caret)
vinho <- read.table(file="vinho.txt", header=TRUE, sep="\t")
vinho_transformado <- vinho %>%
mutate(Tipo=Tipo,
Alcool=Alcool,
AcidoMalico=log(AcidoMalico),
Residuo=Residuo,
AlcalinidadeDoResiduo=AlcalinidadeDoResiduo,
Magnesio=log(Magnesio),
Fenois=Fenois,
Flavonoides=Flavonoides,
NaoFlavonoides=NaoFlavonoides,
Taninos=Taninos,
Cor=log(Cor),
Matiz=Matiz,
Diluicao=Diluicao,
Prolina=log(Prolina))
index        <- createDataPartition(vinho_transformado$Alcool,
p=0.75, list=FALSE)
vinho_treino <- vinho_transformado[ index, ]
vinho_teste  <- vinho_transformado[-index, ]
fitControl <- trainControl(method = "cv",
number = 5,
savePred = TRUE)
vinho_rf <- train(Alcool ~ ., data = vinho_treino,
method = "rpart",
trControl = fitControl,
metric = "RMSE",
tuneGrid = tune.grid)
vinho_rf <- train(Alcool ~ ., data = vinho_treino,
method = "rpart",
trControl = fitControl,
metric = "RMSE")
vinho_rf
vinho_rf <- train(Alcool ~ ., data = vinho_treino,
method = "rf",
trControl = fitControl,
metric = "RMSE")
vinho_rf
tune.grid <- expand.grid(mtry = 1:14)
vinho_rf <- train(Alcool ~ ., data = vinho_treino,
method = "rf",
trControl = fitControl,
metric = "RMSE",
tuneGrid = tune.grid)
vinho_rf
ggplot(vinho_rf)
postResample(predict(vinho_rf, vinho_teste),
vinho_teste$Alcool)
ggplot(varImp(vinho_rf))
varImp(vinho_rf)
ggplot(varImp(vinho_rf$finalModel))
ggplot(importance(vinho_rf$finalModel))
vinho_rf <- train(Alcool ~ ., data = vinho_treino,
method = "rf",
trControl = fitControl,
metric = "RMSE",
importance = TRUE,
tuneGrid = tune.grid)
vinho_rf
ggplot(vinho_rf)
postResample(predict(vinho_rf, vinho_teste),
vinho_teste$Alcool)
ggplot(importance(vinho_rf$finalModel))
ggplot(varImp(vinho_rf$finalModel))
ggplot(varImp(vinho_rf))
plot(gg_error(iris_rf$finalModel))
library(ggRandomForests)
plot(gg_error(iris_rf$finalModel))
plot(gg_error(vinho_rf$finalModel))
?gg_error
plot(vinho_rf$finalModel)
ggplot(vinho_rf$finalModel)
vinho_rf$finalModel
library(shiny); runApp('~/Documents/Research/github/curso.shiny/exemplos/03-inputs/selectInput.R')
runApp('~/Documents/Research/github/curso.shiny/exemplos/03-inputs/selectInput.R')
runApp('~/Documents/Research/github/curso.shiny/exemplos/03-inputs/actionButton.R')
runApp('~/Documents/Research/github/curso.shiny/exemplos/03-inputs/actionButton.R')
runApp('~/Documents/Research/github/curso.shiny/exemplos/03-inputs/passwordInput.R')
runApp('~/Documents/Research/github/curso.shiny/exemplos/03-inputs/passwordInput.R')
runApp('~/Documents/Research/github/curso.shiny/exemplos/04-outputs/renderPlot.R')
runApp('~/Documents/Research/github/curso.shiny/exemplos/04-outputs/renderPrint.R')
runApp('~/Documents/Research/github/curso.shiny/exemplos/04-outputs/renderPlotly.R')
runApp('~/Desktop/regressao-master')
minimo <- -5
maximo <- 5
passo  <- 0.1
x <- seq(from=minimo, to=maximo, by=passo)
y <- seq(from=minimo, to=maximo, by=passo)
data <- expand.grid(x, y)
names(data) <- c("x", "y")
data
dim(data)
runApp('~/Desktop/regressao-master')
minimo <- -20
maximo <- 20
passo  <- 0.1
x <- seq(from=minimo, to=maximo, by=passo)
y <- seq(from=minimo, to=maximo, by=passo)
data <- expand.grid(x, y)
names(data) <- c("x", "y")
dim(data)
runApp('~/Desktop/regressao-master')
setwd("~/Documents/Research/github/curso.shiny/exemplos/05-projeto")
bm <- read.csv(file="BancoMundial.csv")
bm <- read.csv(file="BancoMundial.csv")
names(bm)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
names(bm)
summary(bm)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Desktop')
runApp()
runApp()
runApp()
is.time("-1:-38:-1")
is.Date("-1:-38:-1")
as.Date("-1:-38:-1")
x <- c("-1:-38:-1", "-1:00:-33", "-8:-57:-54")
x <- "-1:-38:-1"
strsplit(x, split = ":")
as.numeric(strsplit(x, split = ":"))
as.numeric(unlist(strsplit(x, split = ":")))
aux <- as.numeric(unlist(strsplit(x, split = ":")))
any(aux)
any(aux < 0)
return(aux)
menor_que_zero <- function(x){
# separa em horas, minutos e segundos
aux <- as.numeric(unlist(strsplit(x, split = ":")))
# determina se alguma medida de horas, minutos
# ou segundos eh menor que zero; em caso afirmativo,
# a hora retornada eh 0:00:00
if (any(aux < 0)){
aux <- "0:00:00"
}
return(aux)
}
x <- c("-1:-38:-1",
"2:00:12",
"-1:00:-33",
"-8:-57:-54",
"5:00:12")
menor_que_zero <- function(x){
# separa em horas, minutos e segundos
aux <- as.numeric(unlist(strsplit(x, split = ":")))
# determina se alguma medida de horas, minutos
# ou segundos eh menor que zero; em caso afirmativo,
# a hora retornada eh 0:00:00
if (any(aux < 0)){
aux <- "0:00:00"
}
return(aux)
}
x <- c("-1:-38:-1",
"2:00:12",
"-1:00:-33",
"-8:-57:-54",
"5:00:12")
menor_que_zero(x)
x <- c("-1:-38:-1",
"2:00:12",
"-1:00:-33",
"-8:-57:-54",
"5:00:12")
menor_que_zero(x)
aux <- as.numeric(unlist(strsplit(x, split = ":")))
aux
# coloca cada hora numa linha de um data frame
aux <- data.frame(matrix(aux, ncol=3))
aux
apply(aux, 1, any)
apply(aux, 1, function(x) {any(x<0)})
x
aux
# coloca cada hora numa linha de um data frame
aux <- data.frame(matrix(aux, ncol=3, byrow=TRUE))
# coloca cada hora numa linha de um data frame
aux <- data.frame(matrix(aux, ncol=3, byrow=TRUE))
apply(aux, 1, function(x) {any(x<0)})
x
aux
data.frame(matrix(aux, ncol=3, byrow=TRUE))
aux
# separa em horas, minutos e segundos
aux <- as.numeric(unlist(strsplit(x, split = ":")))
# coloca cada hora numa linha de um data frame
aux <- data.frame(matrix(aux, ncol=3, byrow=TRUE))
aux
apply(aux, 1, function(x) {any(x<0)})
menor_que_zero <- function(x){
# separa em horas, minutos e segundos
aux <- as.numeric(unlist(strsplit(x, split = ":")))
# coloca cada hora numa linha de um data frame
aux <- data.frame(matrix(aux, ncol=3, byrow=TRUE))
# determina se alguma medida de horas, minutos
# ou segundos eh menor que zero
index <- apply(aux, 1, function(x) {any(x<0)})
# substitui os indexes TRUE por "0:00:00"
aux[index, ] <- "0:00:00"
# retorna o resultado
return(as.vector(aux))
}
x <- c("-1:-38:-1",
"2:00:12",
"-1:00:-33",
"-8:-57:-54",
"5:00:12")
menor_que_zero(x)
# substitui os indexes TRUE por "0:00:00"
resultado[index, ] <- "0:00:00"
resultado          <- 0
resultado[index, ] <- "0:00:00"
dim(aux)
dim(aux)[1]
# substitui os indexes TRUE por "0:00:00"
resultado          <- rep(NA, dim(aux)[1])
resultado[index, ] <- "0:00:00"
index
# determina se alguma medida de horas, minutos
# ou segundos eh menor que zero
index <- apply(aux, 1, function(x) {any(x<0)})
index
resultado[index, ] <- "0:00:00"
resultado[index, ]
index
cumsum(index)
runApp()
runApp('versao_2')
